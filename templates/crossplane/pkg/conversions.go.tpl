{{ template "boilerplate" }}

// Code generated by ack-generate. DO NOT EDIT.

package {{ .CRD.Names.Lower }}

import (
{{- if .CRD.TypeImports }}
{{- range $packagePath, $alias := .CRD.TypeImports }}
	{{ if $alias }}{{ $alias }} {{ end }}"{{ $packagePath }}"
{{ end }}
{{- end }}
	"github.com/aws/aws-sdk-go/aws/awserr"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	svcsdk "github.com/aws/aws-sdk-go/service/{{ .ServiceIDClean }}"

	svcapitypes "github.com/crossplane/provider-aws/apis/{{ .ServiceIDClean }}/{{ .APIVersion}}"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.
// TODO(muvaf): We can generate one-time boilerplate for these hooks but currently
// ACK doesn't support not generating if file exists.

{{ if .CRD.Ops.ReadOne }}
    {{- template "sdk_find_read_one" . }}
{{- else if .CRD.Ops.ReadMany }}
    {{- template "sdk_find_read_many" . }}
{{- end }}

// Generate{{ .CRD.Ops.Create.InputRef.Shape.ShapeName }} returns a create input.
func Generate{{ .CRD.Ops.Create.InputRef.Shape.ShapeName }}(cr *svcapitypes.{{ .CRD.Names.Camel }}) *svcsdk.{{ .CRD.Ops.Create.InputRef.Shape.ShapeName }} {
	res := preGenerate{{ .CRD.Ops.Create.InputRef.Shape.ShapeName }}(cr, &svcsdk.{{ .CRD.Ops.Create.InputRef.Shape.ShapeName }}{})
{{ GoCodeSetCreateInput .CRD "cr" "res" 1 }}
	return postGenerate{{ .CRD.Ops.Create.InputRef.Shape.ShapeName }}(cr, res)
}

{{ if .CRD.Ops.Delete -}}
// Generate{{ .CRD.Ops.Delete.InputRef.Shape.ShapeName }} returns a deletion input.
func Generate{{ .CRD.Ops.Delete.InputRef.Shape.ShapeName }}(cr *svcapitypes.{{ .CRD.Names.Camel }}) *svcsdk.{{ .CRD.Ops.Delete.InputRef.Shape.ShapeName }} {
	res := preGenerate{{ .CRD.Ops.Delete.InputRef.Shape.ShapeName }}(cr, &svcsdk.{{ .CRD.Ops.Delete.InputRef.Shape.ShapeName }}{})
{{ GoCodeSetDeleteInput .CRD "cr" "res" 1 }}
	return postGenerate{{ .CRD.Ops.Delete.InputRef.Shape.ShapeName }}(cr, res)
}
{{ end }}
// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "{{ ResourceExceptionCode .CRD 404 }}" {{ GoCodeSetExceptionMessagePrefixCheck .CRD 404 }}
}