// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/aws/aws-service-operator-k8s/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// AWSResourceManager is an autogenerated mock type for the AWSResourceManager type
type AWSResourceManager struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *AWSResourceManager) Create(_a0 context.Context, _a1 types.AWSResource) (types.AWSResource, error) {
	ret := _m.Called(_a0, _a1)

	var r0 types.AWSResource
	if rf, ok := ret.Get(0).(func(context.Context, types.AWSResource) types.AWSResource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AWSResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AWSResource) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *AWSResourceManager) Delete(_a0 context.Context, _a1 types.AWSResource) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AWSResource) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadOne provides a mock function with given fields: _a0, _a1
func (_m *AWSResourceManager) ReadOne(_a0 context.Context, _a1 types.AWSResource) (types.AWSResource, error) {
	ret := _m.Called(_a0, _a1)

	var r0 types.AWSResource
	if rf, ok := ret.Get(0).(func(context.Context, types.AWSResource) types.AWSResource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AWSResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AWSResource) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *AWSResourceManager) Update(_a0 context.Context, _a1 types.AWSResource) (types.AWSResource, error) {
	ret := _m.Called(_a0, _a1)

	var r0 types.AWSResource
	if rf, ok := ret.Get(0).(func(context.Context, types.AWSResource) types.AWSResource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AWSResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AWSResource) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
