// Code generated by mockery v2.2.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	manager "sigs.k8s.io/controller-runtime/pkg/manager"

	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// AWSResourceReconciler is an autogenerated mock type for the AWSResourceReconciler type
type AWSResourceReconciler struct {
	mock.Mock
}

// BindControllerManager provides a mock function with given fields: _a0
func (_m *AWSResourceReconciler) BindControllerManager(_a0 manager.Manager) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(manager.Manager) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupKind provides a mock function with given fields:
func (_m *AWSResourceReconciler) GroupKind() *v1.GroupKind {
	ret := _m.Called()

	var r0 *v1.GroupKind
	if rf, ok := ret.Get(0).(func() *v1.GroupKind); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GroupKind)
		}
	}

	return r0
}

// Reconcile provides a mock function with given fields: _a0
func (_m *AWSResourceReconciler) Reconcile(_a0 reconcile.Request) (reconcile.Result, error) {
	ret := _m.Called(_a0)

	var r0 reconcile.Result
	if rf, ok := ret.Get(0).(func(reconcile.Request) reconcile.Result); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(reconcile.Request) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretValueFromReference provides a mock function with given fields: ctx, namespace, name, key
func (_m *AWSResourceReconciler) SecretValueFromReference(ctx context.Context, namespace string, name string, key string) (string, error) {
	ret := _m.Called(ctx, namespace, name, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, namespace, name, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, namespace, name, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
