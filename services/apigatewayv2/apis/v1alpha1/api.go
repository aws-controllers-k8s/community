// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// APISpec defines the desired state of API
type APISpec struct {
	APIKeySelectionExpression *string            `json:"apiKeySelectionExpression,omitempty"`
	CorsConfiguration         *Cors              `json:"corsConfiguration,omitempty"`
	CredentialsARN            *string            `json:"credentialsARN,omitempty"`
	Description               *string            `json:"description,omitempty"`
	DisableExecuteAPIEndpoint *bool              `json:"disableExecuteAPIEndpoint,omitempty"`
	DisableSchemaValidation   *bool              `json:"disableSchemaValidation,omitempty"`
	Name                      *string            `json:"name,omitempty"`
	ProtocolType              *string            `json:"protocolType,omitempty"`
	RouteKey                  *string            `json:"routeKey,omitempty"`
	RouteSelectionExpression  *string            `json:"routeSelectionExpression,omitempty"`
	Tags                      map[string]*string `json:"tags,omitempty"`
	Target                    *string            `json:"target,omitempty"`
	Version                   *string            `json:"version,omitempty"`
}

// APIStatus defines the observed state of API
type APIStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions        []*ackv1alpha1.Condition `json:"conditions"`
	APIEndpoint       *string                  `json:"apiEndpoint,omitempty"`
	APIGatewayManaged *bool                    `json:"apiGatewayManaged,omitempty"`
	APIID             *string                  `json:"apiID,omitempty"`
	CreatedDate       *metav1.Time             `json:"createdDate,omitempty"`
	ImportInfo        []*string                `json:"importInfo,omitempty"`
	Warnings          []*string                `json:"warnings,omitempty"`
}

// API is the Schema for the APIS API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type API struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              APISpec   `json:"spec,omitempty"`
	Status            APIStatus `json:"status,omitempty"`
}

// APIList contains a list of API
// +kubebuilder:object:root=true
type APIList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []API `json:"items"`
}

func init() {
	SchemeBuilder.Register(&API{}, &APIList{})
}
