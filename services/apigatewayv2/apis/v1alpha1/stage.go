// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// StageSpec defines the desired state of Stage
type StageSpec struct {
	AccessLogSettings    *AccessLogSettings        `json:"accessLogSettings,omitempty"`
	APIID                *string                   `json:"apiID,omitempty"`
	AutoDeploy           *bool                     `json:"autoDeploy,omitempty"`
	ClientCertificateID  *string                   `json:"clientCertificateID,omitempty"`
	DefaultRouteSettings *RouteSettings            `json:"defaultRouteSettings,omitempty"`
	DeploymentID         *string                   `json:"deploymentID,omitempty"`
	Description          *string                   `json:"description,omitempty"`
	RouteSettings        map[string]*RouteSettings `json:"routeSettings,omitempty"`
	StageName            *string                   `json:"stageName,omitempty"`
	StageVariables       map[string]*string        `json:"stageVariables,omitempty"`
	Tags                 map[string]*string        `json:"tags,omitempty"`
}

// StageStatus defines the observed state of Stage
type StageStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions                  []*ackv1alpha1.Condition `json:"conditions"`
	APIGatewayManaged           *bool                    `json:"apiGatewayManaged,omitempty"`
	CreatedDate                 *metav1.Time             `json:"createdDate,omitempty"`
	LastDeploymentStatusMessage *string                  `json:"lastDeploymentStatusMessage,omitempty"`
	LastUpdatedDate             *metav1.Time             `json:"lastUpdatedDate,omitempty"`
}

// Stage is the Schema for the Stages API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Stage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StageSpec   `json:"spec,omitempty"`
	Status            StageStatus `json:"status,omitempty"`
}

// StageList contains a list of Stage
// +kubebuilder:object:root=true
type StageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Stage `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Stage{}, &StageList{})
}
