// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// IntegrationSpec defines the desired state of Integration
type IntegrationSpec struct {
	APIID                       *string            `json:"apiID,omitempty"`
	ConnectionID                *string            `json:"connectionID,omitempty"`
	ConnectionType              *string            `json:"connectionType,omitempty"`
	ContentHandlingStrategy     *string            `json:"contentHandlingStrategy,omitempty"`
	CredentialsARN              *string            `json:"credentialsARN,omitempty"`
	Description                 *string            `json:"description,omitempty"`
	IntegrationMethod           *string            `json:"integrationMethod,omitempty"`
	IntegrationSubtype          *string            `json:"integrationSubtype,omitempty"`
	IntegrationType             *string            `json:"integrationType,omitempty"`
	IntegrationURI              *string            `json:"integrationURI,omitempty"`
	PassthroughBehavior         *string            `json:"passthroughBehavior,omitempty"`
	PayloadFormatVersion        *string            `json:"payloadFormatVersion,omitempty"`
	RequestParameters           map[string]*string `json:"requestParameters,omitempty"`
	RequestTemplates            map[string]*string `json:"requestTemplates,omitempty"`
	TemplateSelectionExpression *string            `json:"templateSelectionExpression,omitempty"`
	TimeoutInMillis             *int64             `json:"timeoutInMillis,omitempty"`
	TLSConfig                   *TLSConfigInput    `json:"tlsConfig,omitempty"`
}

// IntegrationStatus defines the observed state of Integration
type IntegrationStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions                             []*ackv1alpha1.Condition `json:"conditions"`
	APIGatewayManaged                      *bool                    `json:"apiGatewayManaged,omitempty"`
	IntegrationID                          *string                  `json:"integrationID,omitempty"`
	IntegrationResponseSelectionExpression *string                  `json:"integrationResponseSelectionExpression,omitempty"`
}

// Integration is the Schema for the Integrations API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Integration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IntegrationSpec   `json:"spec,omitempty"`
	Status            IntegrationStatus `json:"status,omitempty"`
}

// IntegrationList contains a list of Integration
// +kubebuilder:object:root=true
type IntegrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Integration `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Integration{}, &IntegrationList{})
}
