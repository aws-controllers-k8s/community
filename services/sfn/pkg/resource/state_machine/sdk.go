// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package state_machine

import (
	"context"
	corev1 "k8s.io/api/core/v1"
	"strings"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackcompare "github.com/aws/aws-controllers-k8s/pkg/compare"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sfn"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/sfn/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SFN{}
	_ = &svcapitypes.StateMachine{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeStateMachineWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeStateMachine", respErr)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "StateMachineDoesNotExist" {
			return nil, ackerr.NotFound
		}
		return nil, respErr
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.CreationDate != nil {
		ko.Status.CreationDate = &metav1.Time{*resp.CreationDate}
	}
	if resp.Definition != nil {
		ko.Spec.Definition = resp.Definition
	}
	if resp.LoggingConfiguration != nil {
		f2 := &svcapitypes.LoggingConfiguration{}
		if resp.LoggingConfiguration.Destinations != nil {
			f2f0 := []*svcapitypes.LogDestination{}
			for _, f2f0iter := range resp.LoggingConfiguration.Destinations {
				f2f0elem := &svcapitypes.LogDestination{}
				if f2f0iter.CloudWatchLogsLogGroup != nil {
					f2f0elemf0 := &svcapitypes.CloudWatchLogsLogGroup{}
					if f2f0iter.CloudWatchLogsLogGroup.LogGroupArn != nil {
						f2f0elemf0.LogGroupARN = f2f0iter.CloudWatchLogsLogGroup.LogGroupArn
					}
					f2f0elem.CloudWatchLogsLogGroup = f2f0elemf0
				}
				f2f0 = append(f2f0, f2f0elem)
			}
			f2.Destinations = f2f0
		}
		if resp.LoggingConfiguration.IncludeExecutionData != nil {
			f2.IncludeExecutionData = resp.LoggingConfiguration.IncludeExecutionData
		}
		if resp.LoggingConfiguration.Level != nil {
			f2.Level = resp.LoggingConfiguration.Level
		}
		ko.Spec.LoggingConfiguration = f2
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	}
	if resp.RoleArn != nil {
		ko.Spec.RoleARN = resp.RoleArn
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.StateMachineArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.StateMachineArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.TracingConfiguration != nil {
		f7 := &svcapitypes.TracingConfiguration{}
		if resp.TracingConfiguration.Enabled != nil {
			f7.Enabled = resp.TracingConfiguration.Enabled
		}
		ko.Spec.TracingConfiguration = f7
	}
	if resp.Type != nil {
		ko.Spec.Type = resp.Type
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required by not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return (r.ko.Status.ACKResourceMetadata == nil || r.ko.Status.ACKResourceMetadata.ARN == nil)

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeStateMachineInput, error) {
	res := &svcsdk.DescribeStateMachineInput{}

	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.SetStateMachineArn(string(*r.ko.Status.ACKResourceMetadata.ARN))
	} else {
		res.SetStateMachineArn(rm.ARNFromName(*r.ko.Spec.Name))
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateStateMachineWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateStateMachine", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.CreationDate != nil {
		ko.Status.CreationDate = &metav1.Time{*resp.CreationDate}
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.StateMachineArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.StateMachineArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateStateMachineInput, error) {
	res := &svcsdk.CreateStateMachineInput{}

	if r.ko.Spec.Definition != nil {
		res.SetDefinition(*r.ko.Spec.Definition)
	}
	if r.ko.Spec.LoggingConfiguration != nil {
		f1 := &svcsdk.LoggingConfiguration{}
		if r.ko.Spec.LoggingConfiguration.Destinations != nil {
			f1f0 := []*svcsdk.LogDestination{}
			for _, f1f0iter := range r.ko.Spec.LoggingConfiguration.Destinations {
				f1f0elem := &svcsdk.LogDestination{}
				if f1f0iter.CloudWatchLogsLogGroup != nil {
					f1f0elemf0 := &svcsdk.CloudWatchLogsLogGroup{}
					if f1f0iter.CloudWatchLogsLogGroup.LogGroupARN != nil {
						f1f0elemf0.SetLogGroupArn(*f1f0iter.CloudWatchLogsLogGroup.LogGroupARN)
					}
					f1f0elem.SetCloudWatchLogsLogGroup(f1f0elemf0)
				}
				f1f0 = append(f1f0, f1f0elem)
			}
			f1.SetDestinations(f1f0)
		}
		if r.ko.Spec.LoggingConfiguration.IncludeExecutionData != nil {
			f1.SetIncludeExecutionData(*r.ko.Spec.LoggingConfiguration.IncludeExecutionData)
		}
		if r.ko.Spec.LoggingConfiguration.Level != nil {
			f1.SetLevel(*r.ko.Spec.LoggingConfiguration.Level)
		}
		res.SetLoggingConfiguration(f1)
	}
	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.RoleARN != nil {
		res.SetRoleArn(*r.ko.Spec.RoleARN)
	}
	if r.ko.Spec.Tags != nil {
		f4 := []*svcsdk.Tag{}
		for _, f4iter := range r.ko.Spec.Tags {
			f4elem := &svcsdk.Tag{}
			if f4iter.Key != nil {
				f4elem.SetKey(*f4iter.Key)
			}
			if f4iter.Value != nil {
				f4elem.SetValue(*f4iter.Value)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTags(f4)
	}
	if r.ko.Spec.TracingConfiguration != nil {
		f5 := &svcsdk.TracingConfiguration{}
		if r.ko.Spec.TracingConfiguration.Enabled != nil {
			f5.SetEnabled(*r.ko.Spec.TracingConfiguration.Enabled)
		}
		res.SetTracingConfiguration(f5)
	}
	if r.ko.Spec.Type != nil {
		res.SetType(*r.ko.Spec.Type)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {

	input, err := rm.newUpdateRequestPayload(desired)
	if err != nil {
		return nil, err
	}

	_, respErr := rm.sdkapi.UpdateStateMachineWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateStateMachine", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	r *resource,
) (*svcsdk.UpdateStateMachineInput, error) {
	res := &svcsdk.UpdateStateMachineInput{}

	if r.ko.Spec.Definition != nil {
		res.SetDefinition(*r.ko.Spec.Definition)
	}
	if r.ko.Spec.LoggingConfiguration != nil {
		f1 := &svcsdk.LoggingConfiguration{}
		if r.ko.Spec.LoggingConfiguration.Destinations != nil {
			f1f0 := []*svcsdk.LogDestination{}
			for _, f1f0iter := range r.ko.Spec.LoggingConfiguration.Destinations {
				f1f0elem := &svcsdk.LogDestination{}
				if f1f0iter.CloudWatchLogsLogGroup != nil {
					f1f0elemf0 := &svcsdk.CloudWatchLogsLogGroup{}
					if f1f0iter.CloudWatchLogsLogGroup.LogGroupARN != nil {
						f1f0elemf0.SetLogGroupArn(*f1f0iter.CloudWatchLogsLogGroup.LogGroupARN)
					}
					f1f0elem.SetCloudWatchLogsLogGroup(f1f0elemf0)
				}
				f1f0 = append(f1f0, f1f0elem)
			}
			f1.SetDestinations(f1f0)
		}
		if r.ko.Spec.LoggingConfiguration.IncludeExecutionData != nil {
			f1.SetIncludeExecutionData(*r.ko.Spec.LoggingConfiguration.IncludeExecutionData)
		}
		if r.ko.Spec.LoggingConfiguration.Level != nil {
			f1.SetLevel(*r.ko.Spec.LoggingConfiguration.Level)
		}
		res.SetLoggingConfiguration(f1)
	}
	if r.ko.Spec.RoleARN != nil {
		res.SetRoleArn(*r.ko.Spec.RoleARN)
	}
	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.SetStateMachineArn(string(*r.ko.Status.ACKResourceMetadata.ARN))
	} else {
		res.SetStateMachineArn(rm.ARNFromName(*r.ko.Spec.Name))
	}
	if r.ko.Spec.TracingConfiguration != nil {
		f4 := &svcsdk.TracingConfiguration{}
		if r.ko.Spec.TracingConfiguration.Enabled != nil {
			f4.SetEnabled(*r.ko.Spec.TracingConfiguration.Enabled)
		}
		res.SetTracingConfiguration(f4)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteStateMachineWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteStateMachine", respErr)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteStateMachineInput, error) {
	res := &svcsdk.DeleteStateMachineInput{}

	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.SetStateMachineArn(string(*r.ko.Status.ACKResourceMetadata.ARN))
	} else {
		res.SetStateMachineArn(rm.ARNFromName(*r.ko.Spec.Name))
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.StateMachine,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	if terminalCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
