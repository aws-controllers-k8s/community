// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type Authentication struct {
	PasswordCount *int64  `json:"passwordCount,omitempty"`
	Type          *string `json:"type_,omitempty"`
}

type AvailabilityZone struct {
	Name *string `json:"name,omitempty"`
}

type CacheCluster struct {
	ARN                        *string      `json:"arn,omitempty"`
	AtRestEncryptionEnabled    *bool        `json:"atRestEncryptionEnabled,omitempty"`
	AuthTokenEnabled           *bool        `json:"authTokenEnabled,omitempty"`
	AuthTokenLastModifiedDate  *metav1.Time `json:"authTokenLastModifiedDate,omitempty"`
	AutoMinorVersionUpgrade    *bool        `json:"autoMinorVersionUpgrade,omitempty"`
	CacheClusterCreateTime     *metav1.Time `json:"cacheClusterCreateTime,omitempty"`
	CacheClusterID             *string      `json:"cacheClusterID,omitempty"`
	CacheClusterStatus         *string      `json:"cacheClusterStatus,omitempty"`
	CacheNodeType              *string      `json:"cacheNodeType,omitempty"`
	CacheSubnetGroupName       *string      `json:"cacheSubnetGroupName,omitempty"`
	ClientDownloadLandingPage  *string      `json:"clientDownloadLandingPage,omitempty"`
	ConfigurationEndpoint      *Endpoint    `json:"configurationEndpoint,omitempty"`
	Engine                     *string      `json:"engine,omitempty"`
	EngineVersion              *string      `json:"engineVersion,omitempty"`
	NumCacheNodes              *int64       `json:"numCacheNodes,omitempty"`
	PreferredAvailabilityZone  *string      `json:"preferredAvailabilityZone,omitempty"`
	PreferredMaintenanceWindow *string      `json:"preferredMaintenanceWindow,omitempty"`
	PreferredOutpostARN        *string      `json:"preferredOutpostARN,omitempty"`
	ReplicationGroupID         *string      `json:"replicationGroupID,omitempty"`
	SnapshotRetentionLimit     *int64       `json:"snapshotRetentionLimit,omitempty"`
	SnapshotWindow             *string      `json:"snapshotWindow,omitempty"`
	TransitEncryptionEnabled   *bool        `json:"transitEncryptionEnabled,omitempty"`
}

type CacheEngineVersion struct {
	CacheEngineDescription        *string `json:"cacheEngineDescription,omitempty"`
	CacheEngineVersionDescription *string `json:"cacheEngineVersionDescription,omitempty"`
	CacheParameterGroupFamily     *string `json:"cacheParameterGroupFamily,omitempty"`
	Engine                        *string `json:"engine,omitempty"`
	EngineVersion                 *string `json:"engineVersion,omitempty"`
}

type CacheNode struct {
	CacheNodeCreateTime      *metav1.Time `json:"cacheNodeCreateTime,omitempty"`
	CacheNodeID              *string      `json:"cacheNodeID,omitempty"`
	CacheNodeStatus          *string      `json:"cacheNodeStatus,omitempty"`
	CustomerAvailabilityZone *string      `json:"customerAvailabilityZone,omitempty"`
	CustomerOutpostARN       *string      `json:"customerOutpostARN,omitempty"`
	Endpoint                 *Endpoint    `json:"endpoint,omitempty"`
	ParameterGroupStatus     *string      `json:"parameterGroupStatus,omitempty"`
	SourceCacheNodeID        *string      `json:"sourceCacheNodeID,omitempty"`
}

type CacheNodeTypeSpecificParameter struct {
	AllowedValues        *string `json:"allowedValues,omitempty"`
	DataType             *string `json:"dataType,omitempty"`
	Description          *string `json:"description,omitempty"`
	IsModifiable         *bool   `json:"isModifiable,omitempty"`
	MinimumEngineVersion *string `json:"minimumEngineVersion,omitempty"`
	ParameterName        *string `json:"parameterName,omitempty"`
	Source               *string `json:"source,omitempty"`
}

type CacheNodeTypeSpecificValue struct {
	CacheNodeType *string `json:"cacheNodeType,omitempty"`
	Value         *string `json:"value,omitempty"`
}

type CacheNodeUpdateStatus struct {
	CacheNodeID                  *string      `json:"cacheNodeID,omitempty"`
	NodeDeletionDate             *metav1.Time `json:"nodeDeletionDate,omitempty"`
	NodeUpdateEndDate            *metav1.Time `json:"nodeUpdateEndDate,omitempty"`
	NodeUpdateInitiatedDate      *metav1.Time `json:"nodeUpdateInitiatedDate,omitempty"`
	NodeUpdateStartDate          *metav1.Time `json:"nodeUpdateStartDate,omitempty"`
	NodeUpdateStatusModifiedDate *metav1.Time `json:"nodeUpdateStatusModifiedDate,omitempty"`
}

type CacheParameterGroupStatus_SDK struct {
	CacheParameterGroupName *string `json:"cacheParameterGroupName,omitempty"`
	ParameterApplyStatus    *string `json:"parameterApplyStatus,omitempty"`
}

type CacheParameterGroup_SDK struct {
	ARN                       *string `json:"arn,omitempty"`
	CacheParameterGroupFamily *string `json:"cacheParameterGroupFamily,omitempty"`
	CacheParameterGroupName   *string `json:"cacheParameterGroupName,omitempty"`
	Description               *string `json:"description,omitempty"`
	IsGlobal                  *bool   `json:"isGlobal,omitempty"`
}

type CacheSecurityGroup struct {
	ARN                    *string `json:"arn,omitempty"`
	CacheSecurityGroupName *string `json:"cacheSecurityGroupName,omitempty"`
	Description            *string `json:"description,omitempty"`
	OwnerID                *string `json:"ownerID,omitempty"`
}

type CacheSecurityGroupMembership struct {
	CacheSecurityGroupName *string `json:"cacheSecurityGroupName,omitempty"`
	Status                 *string `json:"status,omitempty"`
}

type CacheSubnetGroup_SDK struct {
	ARN                         *string   `json:"arn,omitempty"`
	CacheSubnetGroupDescription *string   `json:"cacheSubnetGroupDescription,omitempty"`
	CacheSubnetGroupName        *string   `json:"cacheSubnetGroupName,omitempty"`
	Subnets                     []*Subnet `json:"subnets,omitempty"`
	VPCID                       *string   `json:"vpcID,omitempty"`
}

type ConfigureShard struct {
	NewReplicaCount *int64  `json:"newReplicaCount,omitempty"`
	NodeGroupID     *string `json:"nodeGroupID,omitempty"`
}

type CustomerNodeEndpoint struct {
	Address *string `json:"address,omitempty"`
	Port    *int64  `json:"port,omitempty"`
}

type EC2SecurityGroup struct {
	EC2SecurityGroupName    *string `json:"ec2SecurityGroupName,omitempty"`
	EC2SecurityGroupOwnerID *string `json:"ec2SecurityGroupOwnerID,omitempty"`
	Status                  *string `json:"status,omitempty"`
}

type Endpoint struct {
	Address *string `json:"address,omitempty"`
	Port    *int64  `json:"port,omitempty"`
}

type EngineDefaults struct {
	CacheParameterGroupFamily *string `json:"cacheParameterGroupFamily,omitempty"`
	Marker                    *string `json:"marker,omitempty"`
}

type Event struct {
	Date             *metav1.Time `json:"date,omitempty"`
	Message          *string      `json:"message,omitempty"`
	SourceIdentifier *string      `json:"sourceIdentifier,omitempty"`
}

type Filter struct {
	Name   *string   `json:"name,omitempty"`
	Values []*string `json:"values,omitempty"`
}

type GlobalNodeGroup struct {
	GlobalNodeGroupID *string `json:"globalNodeGroupID,omitempty"`
	Slots             *string `json:"slots,omitempty"`
}

type GlobalReplicationGroup struct {
	ARN                               *string `json:"arn,omitempty"`
	AtRestEncryptionEnabled           *bool   `json:"atRestEncryptionEnabled,omitempty"`
	AuthTokenEnabled                  *bool   `json:"authTokenEnabled,omitempty"`
	CacheNodeType                     *string `json:"cacheNodeType,omitempty"`
	ClusterEnabled                    *bool   `json:"clusterEnabled,omitempty"`
	Engine                            *string `json:"engine,omitempty"`
	EngineVersion                     *string `json:"engineVersion,omitempty"`
	GlobalReplicationGroupDescription *string `json:"globalReplicationGroupDescription,omitempty"`
	GlobalReplicationGroupID          *string `json:"globalReplicationGroupID,omitempty"`
	Status                            *string `json:"status,omitempty"`
	TransitEncryptionEnabled          *bool   `json:"transitEncryptionEnabled,omitempty"`
}

type GlobalReplicationGroupInfo struct {
	GlobalReplicationGroupID         *string `json:"globalReplicationGroupID,omitempty"`
	GlobalReplicationGroupMemberRole *string `json:"globalReplicationGroupMemberRole,omitempty"`
}

type GlobalReplicationGroupMember struct {
	AutomaticFailover      *string `json:"automaticFailover,omitempty"`
	ReplicationGroupID     *string `json:"replicationGroupID,omitempty"`
	ReplicationGroupRegion *string `json:"replicationGroupRegion,omitempty"`
	Role                   *string `json:"role,omitempty"`
	Status                 *string `json:"status,omitempty"`
}

type NodeGroup struct {
	NodeGroupID      *string            `json:"nodeGroupID,omitempty"`
	NodeGroupMembers []*NodeGroupMember `json:"nodeGroupMembers,omitempty"`
	PrimaryEndpoint  *Endpoint          `json:"primaryEndpoint,omitempty"`
	ReaderEndpoint   *Endpoint          `json:"readerEndpoint,omitempty"`
	Slots            *string            `json:"slots,omitempty"`
	Status           *string            `json:"status,omitempty"`
}

type NodeGroupConfiguration struct {
	NodeGroupID              *string   `json:"nodeGroupID,omitempty"`
	PrimaryAvailabilityZone  *string   `json:"primaryAvailabilityZone,omitempty"`
	PrimaryOutpostARN        *string   `json:"primaryOutpostARN,omitempty"`
	ReplicaAvailabilityZones []*string `json:"replicaAvailabilityZones,omitempty"`
	ReplicaCount             *int64    `json:"replicaCount,omitempty"`
	ReplicaOutpostARNs       []*string `json:"replicaOutpostARNs,omitempty"`
	Slots                    *string   `json:"slots,omitempty"`
}

type NodeGroupMember struct {
	CacheClusterID            *string   `json:"cacheClusterID,omitempty"`
	CacheNodeID               *string   `json:"cacheNodeID,omitempty"`
	CurrentRole               *string   `json:"currentRole,omitempty"`
	PreferredAvailabilityZone *string   `json:"preferredAvailabilityZone,omitempty"`
	PreferredOutpostARN       *string   `json:"preferredOutpostARN,omitempty"`
	ReadEndpoint              *Endpoint `json:"readEndpoint,omitempty"`
}

type NodeGroupMemberUpdateStatus struct {
	CacheClusterID               *string      `json:"cacheClusterID,omitempty"`
	CacheNodeID                  *string      `json:"cacheNodeID,omitempty"`
	NodeDeletionDate             *metav1.Time `json:"nodeDeletionDate,omitempty"`
	NodeUpdateEndDate            *metav1.Time `json:"nodeUpdateEndDate,omitempty"`
	NodeUpdateInitiatedDate      *metav1.Time `json:"nodeUpdateInitiatedDate,omitempty"`
	NodeUpdateStartDate          *metav1.Time `json:"nodeUpdateStartDate,omitempty"`
	NodeUpdateStatusModifiedDate *metav1.Time `json:"nodeUpdateStatusModifiedDate,omitempty"`
}

type NodeGroupUpdateStatus struct {
	NodeGroupID *string `json:"nodeGroupID,omitempty"`
}

type NodeSnapshot struct {
	CacheClusterID         *string                 `json:"cacheClusterID,omitempty"`
	CacheNodeCreateTime    *metav1.Time            `json:"cacheNodeCreateTime,omitempty"`
	CacheNodeID            *string                 `json:"cacheNodeID,omitempty"`
	CacheSize              *string                 `json:"cacheSize,omitempty"`
	NodeGroupConfiguration *NodeGroupConfiguration `json:"nodeGroupConfiguration,omitempty"`
	NodeGroupID            *string                 `json:"nodeGroupID,omitempty"`
	SnapshotCreateTime     *metav1.Time            `json:"snapshotCreateTime,omitempty"`
}

type NotificationConfiguration struct {
	TopicARN    *string `json:"topicARN,omitempty"`
	TopicStatus *string `json:"topicStatus,omitempty"`
}

type Parameter struct {
	AllowedValues        *string `json:"allowedValues,omitempty"`
	DataType             *string `json:"dataType,omitempty"`
	Description          *string `json:"description,omitempty"`
	IsModifiable         *bool   `json:"isModifiable,omitempty"`
	MinimumEngineVersion *string `json:"minimumEngineVersion,omitempty"`
	ParameterName        *string `json:"parameterName,omitempty"`
	ParameterValue       *string `json:"parameterValue,omitempty"`
	Source               *string `json:"source,omitempty"`
}

type ParameterNameValue struct {
	ParameterName  *string `json:"parameterName,omitempty"`
	ParameterValue *string `json:"parameterValue,omitempty"`
}

type PendingModifiedValues struct {
	AuthTokenStatus *string `json:"authTokenStatus,omitempty"`
	CacheNodeType   *string `json:"cacheNodeType,omitempty"`
	EngineVersion   *string `json:"engineVersion,omitempty"`
	NumCacheNodes   *int64  `json:"numCacheNodes,omitempty"`
}

type ProcessedUpdateAction struct {
	CacheClusterID     *string `json:"cacheClusterID,omitempty"`
	ReplicationGroupID *string `json:"replicationGroupID,omitempty"`
	ServiceUpdateName  *string `json:"serviceUpdateName,omitempty"`
}

type RecurringCharge struct {
	RecurringChargeAmount    *float64 `json:"recurringChargeAmount,omitempty"`
	RecurringChargeFrequency *string  `json:"recurringChargeFrequency,omitempty"`
}

type RegionalConfiguration struct {
	ReplicationGroupID     *string `json:"replicationGroupID,omitempty"`
	ReplicationGroupRegion *string `json:"replicationGroupRegion,omitempty"`
}

type ReplicationGroupPendingModifiedValues struct {
	AuthTokenStatus         *string                 `json:"authTokenStatus,omitempty"`
	AutomaticFailoverStatus *string                 `json:"automaticFailoverStatus,omitempty"`
	PrimaryClusterID        *string                 `json:"primaryClusterID,omitempty"`
	Resharding              *ReshardingStatus       `json:"resharding,omitempty"`
	UserGroups              *UserGroupsUpdateStatus `json:"userGroups,omitempty"`
}

type ReplicationGroup_SDK struct {
	ARN                        *string                                `json:"arn,omitempty"`
	AtRestEncryptionEnabled    *bool                                  `json:"atRestEncryptionEnabled,omitempty"`
	AuthTokenEnabled           *bool                                  `json:"authTokenEnabled,omitempty"`
	AuthTokenLastModifiedDate  *metav1.Time                           `json:"authTokenLastModifiedDate,omitempty"`
	AutomaticFailover          *string                                `json:"automaticFailover,omitempty"`
	CacheNodeType              *string                                `json:"cacheNodeType,omitempty"`
	ClusterEnabled             *bool                                  `json:"clusterEnabled,omitempty"`
	ConfigurationEndpoint      *Endpoint                              `json:"configurationEndpoint,omitempty"`
	Description                *string                                `json:"description,omitempty"`
	GlobalReplicationGroupInfo *GlobalReplicationGroupInfo            `json:"globalReplicationGroupInfo,omitempty"`
	KMSKeyID                   *string                                `json:"kmsKeyID,omitempty"`
	MemberClusters             []*string                              `json:"memberClusters,omitempty"`
	MemberClustersOutpostARNs  []*string                              `json:"memberClustersOutpostARNs,omitempty"`
	MultiAZ                    *string                                `json:"multiAZ,omitempty"`
	NodeGroups                 []*NodeGroup                           `json:"nodeGroups,omitempty"`
	PendingModifiedValues      *ReplicationGroupPendingModifiedValues `json:"pendingModifiedValues,omitempty"`
	ReplicationGroupID         *string                                `json:"replicationGroupID,omitempty"`
	SnapshotRetentionLimit     *int64                                 `json:"snapshotRetentionLimit,omitempty"`
	SnapshotWindow             *string                                `json:"snapshotWindow,omitempty"`
	SnapshottingClusterID      *string                                `json:"snapshottingClusterID,omitempty"`
	Status                     *string                                `json:"status,omitempty"`
	TransitEncryptionEnabled   *bool                                  `json:"transitEncryptionEnabled,omitempty"`
	UserGroupIDs               []*string                              `json:"userGroupIDs,omitempty"`
}

type ReservedCacheNode struct {
	CacheNodeCount               *int64       `json:"cacheNodeCount,omitempty"`
	CacheNodeType                *string      `json:"cacheNodeType,omitempty"`
	Duration                     *int64       `json:"duration,omitempty"`
	FixedPrice                   *float64     `json:"fixedPrice,omitempty"`
	OfferingType                 *string      `json:"offeringType,omitempty"`
	ProductDescription           *string      `json:"productDescription,omitempty"`
	ReservationARN               *string      `json:"reservationARN,omitempty"`
	ReservedCacheNodeID          *string      `json:"reservedCacheNodeID,omitempty"`
	ReservedCacheNodesOfferingID *string      `json:"reservedCacheNodesOfferingID,omitempty"`
	StartTime                    *metav1.Time `json:"startTime,omitempty"`
	State                        *string      `json:"state,omitempty"`
	UsagePrice                   *float64     `json:"usagePrice,omitempty"`
}

type ReservedCacheNodesOffering struct {
	CacheNodeType                *string  `json:"cacheNodeType,omitempty"`
	Duration                     *int64   `json:"duration,omitempty"`
	FixedPrice                   *float64 `json:"fixedPrice,omitempty"`
	OfferingType                 *string  `json:"offeringType,omitempty"`
	ProductDescription           *string  `json:"productDescription,omitempty"`
	ReservedCacheNodesOfferingID *string  `json:"reservedCacheNodesOfferingID,omitempty"`
	UsagePrice                   *float64 `json:"usagePrice,omitempty"`
}

type ReshardingConfiguration struct {
	NodeGroupID                *string   `json:"nodeGroupID,omitempty"`
	PreferredAvailabilityZones []*string `json:"preferredAvailabilityZones,omitempty"`
}

type ReshardingStatus struct {
	SlotMigration *SlotMigration `json:"slotMigration,omitempty"`
}

type SecurityGroupMembership struct {
	SecurityGroupID *string `json:"securityGroupID,omitempty"`
	Status          *string `json:"status,omitempty"`
}

type ServiceUpdate struct {
	AutoUpdateAfterRecommendedApplyByDate *bool        `json:"autoUpdateAfterRecommendedApplyByDate,omitempty"`
	Engine                                *string      `json:"engine,omitempty"`
	EngineVersion                         *string      `json:"engineVersion,omitempty"`
	EstimatedUpdateTime                   *string      `json:"estimatedUpdateTime,omitempty"`
	ServiceUpdateDescription              *string      `json:"serviceUpdateDescription,omitempty"`
	ServiceUpdateEndDate                  *metav1.Time `json:"serviceUpdateEndDate,omitempty"`
	ServiceUpdateName                     *string      `json:"serviceUpdateName,omitempty"`
	ServiceUpdateRecommendedApplyByDate   *metav1.Time `json:"serviceUpdateRecommendedApplyByDate,omitempty"`
	ServiceUpdateReleaseDate              *metav1.Time `json:"serviceUpdateReleaseDate,omitempty"`
}

type SlotMigration struct {
	ProgressPercentage *float64 `json:"progressPercentage,omitempty"`
}

type Snapshot_SDK struct {
	ARN                         *string         `json:"arn,omitempty"`
	AutoMinorVersionUpgrade     *bool           `json:"autoMinorVersionUpgrade,omitempty"`
	AutomaticFailover           *string         `json:"automaticFailover,omitempty"`
	CacheClusterCreateTime      *metav1.Time    `json:"cacheClusterCreateTime,omitempty"`
	CacheClusterID              *string         `json:"cacheClusterID,omitempty"`
	CacheNodeType               *string         `json:"cacheNodeType,omitempty"`
	CacheParameterGroupName     *string         `json:"cacheParameterGroupName,omitempty"`
	CacheSubnetGroupName        *string         `json:"cacheSubnetGroupName,omitempty"`
	Engine                      *string         `json:"engine,omitempty"`
	EngineVersion               *string         `json:"engineVersion,omitempty"`
	KMSKeyID                    *string         `json:"kmsKeyID,omitempty"`
	NodeSnapshots               []*NodeSnapshot `json:"nodeSnapshots,omitempty"`
	NumCacheNodes               *int64          `json:"numCacheNodes,omitempty"`
	NumNodeGroups               *int64          `json:"numNodeGroups,omitempty"`
	Port                        *int64          `json:"port,omitempty"`
	PreferredAvailabilityZone   *string         `json:"preferredAvailabilityZone,omitempty"`
	PreferredMaintenanceWindow  *string         `json:"preferredMaintenanceWindow,omitempty"`
	PreferredOutpostARN         *string         `json:"preferredOutpostARN,omitempty"`
	ReplicationGroupDescription *string         `json:"replicationGroupDescription,omitempty"`
	ReplicationGroupID          *string         `json:"replicationGroupID,omitempty"`
	SnapshotName                *string         `json:"snapshotName,omitempty"`
	SnapshotRetentionLimit      *int64          `json:"snapshotRetentionLimit,omitempty"`
	SnapshotSource              *string         `json:"snapshotSource,omitempty"`
	SnapshotStatus              *string         `json:"snapshotStatus,omitempty"`
	SnapshotWindow              *string         `json:"snapshotWindow,omitempty"`
	TopicARN                    *string         `json:"topicARN,omitempty"`
	VPCID                       *string         `json:"vpcID,omitempty"`
}

type Subnet struct {
	SubnetAvailabilityZone *AvailabilityZone `json:"subnetAvailabilityZone,omitempty"`
	SubnetIdentifier       *string           `json:"subnetIdentifier,omitempty"`
	SubnetOutpost          *SubnetOutpost    `json:"subnetOutpost,omitempty"`
}

type SubnetOutpost struct {
	SubnetOutpostARN *string `json:"subnetOutpostARN,omitempty"`
}

type Tag struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

type TimeRangeFilter struct {
	EndTime   *metav1.Time `json:"endTime,omitempty"`
	StartTime *metav1.Time `json:"startTime,omitempty"`
}

type UnprocessedUpdateAction struct {
	CacheClusterID     *string `json:"cacheClusterID,omitempty"`
	ErrorMessage       *string `json:"errorMessage,omitempty"`
	ErrorType          *string `json:"errorType,omitempty"`
	ReplicationGroupID *string `json:"replicationGroupID,omitempty"`
	ServiceUpdateName  *string `json:"serviceUpdateName,omitempty"`
}

type UpdateAction struct {
	CacheClusterID                      *string      `json:"cacheClusterID,omitempty"`
	Engine                              *string      `json:"engine,omitempty"`
	EstimatedUpdateTime                 *string      `json:"estimatedUpdateTime,omitempty"`
	NodesUpdated                        *string      `json:"nodesUpdated,omitempty"`
	ReplicationGroupID                  *string      `json:"replicationGroupID,omitempty"`
	ServiceUpdateName                   *string      `json:"serviceUpdateName,omitempty"`
	ServiceUpdateRecommendedApplyByDate *metav1.Time `json:"serviceUpdateRecommendedApplyByDate,omitempty"`
	ServiceUpdateReleaseDate            *metav1.Time `json:"serviceUpdateReleaseDate,omitempty"`
	UpdateActionAvailableDate           *metav1.Time `json:"updateActionAvailableDate,omitempty"`
	UpdateActionStatusModifiedDate      *metav1.Time `json:"updateActionStatusModifiedDate,omitempty"`
}

type UserGroupPendingChanges struct {
	UserIDsToAdd    []*string `json:"userIDsToAdd,omitempty"`
	UserIDsToRemove []*string `json:"userIDsToRemove,omitempty"`
}

type UserGroup_SDK struct {
	ARN               *string                  `json:"arn,omitempty"`
	Engine            *string                  `json:"engine,omitempty"`
	PendingChanges    *UserGroupPendingChanges `json:"pendingChanges,omitempty"`
	ReplicationGroups []*string                `json:"replicationGroups,omitempty"`
	Status            *string                  `json:"status,omitempty"`
	UserGroupID       *string                  `json:"userGroupID,omitempty"`
	UserIDs           []*string                `json:"userIDs,omitempty"`
}

type UserGroupsUpdateStatus struct {
	UserGroupIDsToAdd    []*string `json:"userGroupIDsToAdd,omitempty"`
	UserGroupIDsToRemove []*string `json:"userGroupIDsToRemove,omitempty"`
}

type User_SDK struct {
	ARN            *string         `json:"arn,omitempty"`
	AccessString   *string         `json:"accessString,omitempty"`
	Authentication *Authentication `json:"authentication,omitempty"`
	Engine         *string         `json:"engine,omitempty"`
	Status         *string         `json:"status,omitempty"`
	UserGroupIDs   []*string       `json:"userGroupIDs,omitempty"`
	UserID         *string         `json:"userID,omitempty"`
	UserName       *string         `json:"userName,omitempty"`
}

// SecretReference has enough information to retrieve secret
// in any namespace.
type SecretReference struct {
	// Namespace defines the space within which the secret name must be unique.
	Namespace string `json:"namespace,omitempty"`
	// Name of secret in a given namespace.
	Name string `json:"name,omitempty"`
	// Key of the secret.
	Key string `json:"key,omitempty"`
}
