// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// QueueSpec defines the desired state of Queue
type QueueSpec struct {
	ContentBasedDeduplication    *string `json:"contentBasedDeduplication,omitempty"`
	DelaySeconds                 *string `json:"delaySeconds,omitempty"`
	FifoQueue                    *string `json:"fifoQueue,omitempty"`
	KMSDataKeyReusePeriodSeconds *string `json:"kmsDataKeyReusePeriodSeconds,omitempty"`
	KMSMasterKeyID               *string `json:"kmsMasterKeyID,omitempty"`
	MaximumMessageSize           *string `json:"maximumMessageSize,omitempty"`
	MessageRetentionPeriod       *string `json:"messageRetentionPeriod,omitempty"`
	Policy                       *string `json:"policy,omitempty"`
	// +kubebuilder:validation:Required
	QueueName                     *string            `json:"queueName"`
	ReceiveMessageWaitTimeSeconds *string            `json:"receiveMessageWaitTimeSeconds,omitempty"`
	RedrivePolicy                 *string            `json:"redrivePolicy,omitempty"`
	Tags                          map[string]*string `json:"tags,omitempty"`
	VisibilityTimeout             *string            `json:"visibilityTimeout,omitempty"`
}

// QueueStatus defines the observed state of Queue
type QueueStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions            []*ackv1alpha1.Condition `json:"conditions"`
	CreatedTimestamp      *string                  `json:"createdTimestamp,omitempty"`
	LastModifiedTimestamp *string                  `json:"lastModifiedTimestamp,omitempty"`
	QueueURL              *string                  `json:"queueURL,omitempty"`
}

// Queue is the Schema for the Queues API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Queue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QueueSpec   `json:"spec,omitempty"`
	Status            QueueStatus `json:"status,omitempty"`
}

// QueueList contains a list of Queue
// +kubebuilder:object:root=true
type QueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Queue `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Queue{}, &QueueList{})
}
