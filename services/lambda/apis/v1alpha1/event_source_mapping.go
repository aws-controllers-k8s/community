// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EventSourceMappingSpec defines the desired state of EventSourceMapping
type EventSourceMappingSpec struct {
	 BatchSize *int64 `json:"batchSize,omitempty"` 
	 BisectBatchOnFunctionError *bool `json:"bisectBatchOnFunctionError,omitempty"` 
	 DestinationConfig *DestinationConfig `json:"destinationConfig,omitempty"` 
	 Enabled *bool `json:"enabled,omitempty"` 
	 // +kubebuilder:validation:Required
	EventSourceARN *string `json:"eventSourceARN"`
	 // +kubebuilder:validation:Required
	FunctionName *string `json:"functionName"`
	 MaximumBatchingWindowInSeconds *int64 `json:"maximumBatchingWindowInSeconds,omitempty"` 
	 MaximumRecordAgeInSeconds *int64 `json:"maximumRecordAgeInSeconds,omitempty"` 
	 MaximumRetryAttempts *int64 `json:"maximumRetryAttempts,omitempty"` 
	 ParallelizationFactor *int64 `json:"parallelizationFactor,omitempty"` 
	 StartingPosition *string `json:"startingPosition,omitempty"` 
	 StartingPositionTimestamp *metav1.Time `json:"startingPositionTimestamp,omitempty"` 
	 Topics []*string `json:"topics,omitempty"` 
}

// EventSourceMappingStatus defines the observed state of EventSourceMapping
type EventSourceMappingStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	FunctionARN *string `json:"functionARN,omitempty"`
	LastModified *metav1.Time `json:"lastModified,omitempty"`
	LastProcessingResult *string `json:"lastProcessingResult,omitempty"`
	State *string `json:"state,omitempty"`
	StateTransitionReason *string `json:"stateTransitionReason,omitempty"`
	UUID *string `json:"uUID,omitempty"`
}

// EventSourceMapping is the Schema for the EventSourceMappings API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type EventSourceMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   EventSourceMappingSpec   `json:"spec,omitempty"`
	Status EventSourceMappingStatus `json:"status,omitempty"`
}

// EventSourceMappingList contains a list of EventSourceMapping
// +kubebuilder:object:root=true
type EventSourceMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []EventSourceMapping `json:"items"`
}

func init() {
	SchemeBuilder.Register(&EventSourceMapping{}, &EventSourceMappingList{})
}
