// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package event_source_mapping

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackcompare "github.com/aws/aws-controllers-k8s/pkg/compare"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/lambda"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/lambda/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.Lambda{}
	_ = &svcapitypes.EventSourceMapping{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.GetEventSourceMappingWithContext(ctx, input)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.BatchSize != nil {
		ko.Spec.BatchSize = resp.BatchSize
	}
	if resp.BisectBatchOnFunctionError != nil {
		ko.Spec.BisectBatchOnFunctionError = resp.BisectBatchOnFunctionError
	}
	if resp.DestinationConfig != nil {
		f2 := &svcapitypes.DestinationConfig{}
		if resp.DestinationConfig.OnFailure != nil {
			f2f0 := &svcapitypes.OnFailure{}
			if resp.DestinationConfig.OnFailure.Destination != nil {
				f2f0.Destination = resp.DestinationConfig.OnFailure.Destination
			}
			f2.OnFailure = f2f0
		}
		if resp.DestinationConfig.OnSuccess != nil {
			f2f1 := &svcapitypes.OnSuccess{}
			if resp.DestinationConfig.OnSuccess.Destination != nil {
				f2f1.Destination = resp.DestinationConfig.OnSuccess.Destination
			}
			f2.OnSuccess = f2f1
		}
		ko.Spec.DestinationConfig = f2
	}
	if resp.EventSourceArn != nil {
		ko.Spec.EventSourceARN = resp.EventSourceArn
	}
	if resp.FunctionArn != nil {
		ko.Status.FunctionARN = resp.FunctionArn
	}
	if resp.LastModified != nil {
		ko.Status.LastModified = &metav1.Time{*resp.LastModified}
	}
	if resp.LastProcessingResult != nil {
		ko.Status.LastProcessingResult = resp.LastProcessingResult
	}
	if resp.MaximumBatchingWindowInSeconds != nil {
		ko.Spec.MaximumBatchingWindowInSeconds = resp.MaximumBatchingWindowInSeconds
	}
	if resp.MaximumRecordAgeInSeconds != nil {
		ko.Spec.MaximumRecordAgeInSeconds = resp.MaximumRecordAgeInSeconds
	}
	if resp.MaximumRetryAttempts != nil {
		ko.Spec.MaximumRetryAttempts = resp.MaximumRetryAttempts
	}
	if resp.ParallelizationFactor != nil {
		ko.Spec.ParallelizationFactor = resp.ParallelizationFactor
	}
	if resp.State != nil {
		ko.Status.State = resp.State
	}
	if resp.StateTransitionReason != nil {
		ko.Status.StateTransitionReason = resp.StateTransitionReason
	}
	if resp.Topics != nil {
		f13 := []*string{}
		for _, f13iter := range resp.Topics {
			var f13elem string
			f13elem = *f13iter
			f13 = append(f13, &f13elem)
		}
		ko.Spec.Topics = f13
	}
	if resp.UUID != nil {
		ko.Status.UUID = resp.UUID
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required by not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.UUID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetEventSourceMappingInput, error) {
	res := &svcsdk.GetEventSourceMappingInput{}

	if r.ko.Status.UUID != nil {
		res.SetUUID(*r.ko.Status.UUID)
	}

	return res, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.ListEventSourceMappingsInput, error) {
	res := &svcsdk.ListEventSourceMappingsInput{}

	if r.ko.Spec.EventSourceARN != nil {
		res.SetEventSourceArn(*r.ko.Spec.EventSourceARN)
	}
	if r.ko.Spec.FunctionName != nil {
		res.SetFunctionName(*r.ko.Spec.FunctionName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateEventSourceMappingWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.FunctionArn != nil {
		ko.Status.FunctionARN = resp.FunctionArn
	}
	if resp.LastModified != nil {
		ko.Status.LastModified = &metav1.Time{*resp.LastModified}
	}
	if resp.LastProcessingResult != nil {
		ko.Status.LastProcessingResult = resp.LastProcessingResult
	}
	if resp.State != nil {
		ko.Status.State = resp.State
	}
	if resp.StateTransitionReason != nil {
		ko.Status.StateTransitionReason = resp.StateTransitionReason
	}
	if resp.UUID != nil {
		ko.Status.UUID = resp.UUID
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateEventSourceMappingInput, error) {
	res := &svcsdk.CreateEventSourceMappingInput{}

	if r.ko.Spec.BatchSize != nil {
		res.SetBatchSize(*r.ko.Spec.BatchSize)
	}
	if r.ko.Spec.BisectBatchOnFunctionError != nil {
		res.SetBisectBatchOnFunctionError(*r.ko.Spec.BisectBatchOnFunctionError)
	}
	if r.ko.Spec.DestinationConfig != nil {
		f2 := &svcsdk.DestinationConfig{}
		if r.ko.Spec.DestinationConfig.OnFailure != nil {
			f2f0 := &svcsdk.OnFailure{}
			if r.ko.Spec.DestinationConfig.OnFailure.Destination != nil {
				f2f0.SetDestination(*r.ko.Spec.DestinationConfig.OnFailure.Destination)
			}
			f2.SetOnFailure(f2f0)
		}
		if r.ko.Spec.DestinationConfig.OnSuccess != nil {
			f2f1 := &svcsdk.OnSuccess{}
			if r.ko.Spec.DestinationConfig.OnSuccess.Destination != nil {
				f2f1.SetDestination(*r.ko.Spec.DestinationConfig.OnSuccess.Destination)
			}
			f2.SetOnSuccess(f2f1)
		}
		res.SetDestinationConfig(f2)
	}
	if r.ko.Spec.Enabled != nil {
		res.SetEnabled(*r.ko.Spec.Enabled)
	}
	if r.ko.Spec.EventSourceARN != nil {
		res.SetEventSourceArn(*r.ko.Spec.EventSourceARN)
	}
	if r.ko.Spec.FunctionName != nil {
		res.SetFunctionName(*r.ko.Spec.FunctionName)
	}
	if r.ko.Spec.MaximumBatchingWindowInSeconds != nil {
		res.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.MaximumBatchingWindowInSeconds)
	}
	if r.ko.Spec.MaximumRecordAgeInSeconds != nil {
		res.SetMaximumRecordAgeInSeconds(*r.ko.Spec.MaximumRecordAgeInSeconds)
	}
	if r.ko.Spec.MaximumRetryAttempts != nil {
		res.SetMaximumRetryAttempts(*r.ko.Spec.MaximumRetryAttempts)
	}
	if r.ko.Spec.ParallelizationFactor != nil {
		res.SetParallelizationFactor(*r.ko.Spec.ParallelizationFactor)
	}
	if r.ko.Spec.StartingPosition != nil {
		res.SetStartingPosition(*r.ko.Spec.StartingPosition)
	}
	if r.ko.Spec.StartingPositionTimestamp != nil {
		res.SetStartingPositionTimestamp(r.ko.Spec.StartingPositionTimestamp.Time)
	}
	if r.ko.Spec.Topics != nil {
		f12 := []*string{}
		for _, f12iter := range r.ko.Spec.Topics {
			var f12elem string
			f12elem = *f12iter
			f12 = append(f12, &f12elem)
		}
		res.SetTopics(f12)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {

	input, err := rm.newUpdateRequestPayload(desired)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.UpdateEventSourceMappingWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.FunctionArn != nil {
		ko.Status.FunctionARN = resp.FunctionArn
	}
	if resp.LastModified != nil {
		ko.Status.LastModified = &metav1.Time{*resp.LastModified}
	}
	if resp.LastProcessingResult != nil {
		ko.Status.LastProcessingResult = resp.LastProcessingResult
	}
	if resp.State != nil {
		ko.Status.State = resp.State
	}
	if resp.StateTransitionReason != nil {
		ko.Status.StateTransitionReason = resp.StateTransitionReason
	}
	if resp.UUID != nil {
		ko.Status.UUID = resp.UUID
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	r *resource,
) (*svcsdk.UpdateEventSourceMappingInput, error) {
	res := &svcsdk.UpdateEventSourceMappingInput{}

	if r.ko.Spec.BatchSize != nil {
		res.SetBatchSize(*r.ko.Spec.BatchSize)
	}
	if r.ko.Spec.BisectBatchOnFunctionError != nil {
		res.SetBisectBatchOnFunctionError(*r.ko.Spec.BisectBatchOnFunctionError)
	}
	if r.ko.Spec.DestinationConfig != nil {
		f2 := &svcsdk.DestinationConfig{}
		if r.ko.Spec.DestinationConfig.OnFailure != nil {
			f2f0 := &svcsdk.OnFailure{}
			if r.ko.Spec.DestinationConfig.OnFailure.Destination != nil {
				f2f0.SetDestination(*r.ko.Spec.DestinationConfig.OnFailure.Destination)
			}
			f2.SetOnFailure(f2f0)
		}
		if r.ko.Spec.DestinationConfig.OnSuccess != nil {
			f2f1 := &svcsdk.OnSuccess{}
			if r.ko.Spec.DestinationConfig.OnSuccess.Destination != nil {
				f2f1.SetDestination(*r.ko.Spec.DestinationConfig.OnSuccess.Destination)
			}
			f2.SetOnSuccess(f2f1)
		}
		res.SetDestinationConfig(f2)
	}
	if r.ko.Spec.Enabled != nil {
		res.SetEnabled(*r.ko.Spec.Enabled)
	}
	if r.ko.Spec.FunctionName != nil {
		res.SetFunctionName(*r.ko.Spec.FunctionName)
	}
	if r.ko.Spec.MaximumBatchingWindowInSeconds != nil {
		res.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.MaximumBatchingWindowInSeconds)
	}
	if r.ko.Spec.MaximumRecordAgeInSeconds != nil {
		res.SetMaximumRecordAgeInSeconds(*r.ko.Spec.MaximumRecordAgeInSeconds)
	}
	if r.ko.Spec.MaximumRetryAttempts != nil {
		res.SetMaximumRetryAttempts(*r.ko.Spec.MaximumRetryAttempts)
	}
	if r.ko.Spec.ParallelizationFactor != nil {
		res.SetParallelizationFactor(*r.ko.Spec.ParallelizationFactor)
	}
	if r.ko.Status.UUID != nil {
		res.SetUUID(*r.ko.Status.UUID)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteEventSourceMappingWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteEventSourceMappingInput, error) {
	res := &svcsdk.DeleteEventSourceMappingInput{}

	if r.ko.Status.UUID != nil {
		res.SetUUID(*r.ko.Status.UUID)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.EventSourceMapping,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}
